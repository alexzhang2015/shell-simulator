<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<!-- This HTML file has been created by texi2html 1.45
     from /usr/local/gnu/src/readline-2.0/readline-2.0/doc/rlman.texinfo on 8 March 1996 -->

<TITLE>GNU Readline Library - Programming with GNU Readline</TITLE>
</HEAD>
<BODY>
Go to the <A HREF="rlman_1.html">first</A>, <A HREF="rlman_1.html">previous</A>, <A HREF="rlman_3.html">next</A>, <A HREF="rlman_4.html">last</A> section, <A HREF="rlman_toc.html">table of contents</A>.
<HR>


<H1><A NAME="SEC21" HREF="rlman_toc.html#SEC21">Programming with GNU Readline</A></H1>

<P>
This chapter describes the interface between the GNU Readline Library and
other programs.  If you are a programmer, and you wish to include the
features found in GNU Readline
such as completion, line editing, and interactive history manipulation
in your own programs, this section is for you.

</P>

<UL>
<LI><A HREF="rlman_2.html#SEC22">Basic Behavior</A>: Using the default behavior of Readline.
<LI><A HREF="rlman_2.html#SEC23">Custom Functions</A>: Adding your own functions to Readline.
<LI><A HREF="rlman_2.html#SEC26">Readline Convenience Functions</A>: Functions which Readline supplies to
					aid in writing your own
<LI><A HREF="rlman_2.html#SEC36">Custom Completers</A>: Supplanting or supplementing Readline's
			completion functions.
</UL>



<H2><A NAME="SEC22" HREF="rlman_toc.html#SEC22">Basic Behavior</A></H2>

<P>
Many programs provide a command line interface, such as <CODE>mail</CODE>,
<CODE>ftp</CODE>, and <CODE>sh</CODE>.  For such programs, the default behaviour of
Readline is sufficient.  This section describes how to use Readline in
the simplest way possible, perhaps to replace calls in your code to
<CODE>gets()</CODE> or <CODE>fgets ()</CODE>.

</P>
<P>
<A NAME="IDX77"></A>
<A NAME="IDX78"></A>
The function <CODE>readline ()</CODE> prints a prompt and then reads and returns
a single line of text from the user.  The line <CODE>readline</CODE>
returns is allocated with <CODE>malloc ()</CODE>; you should <CODE>free ()</CODE>
the line when you are done with it.  The declaration for <CODE>readline</CODE>
in ANSI C is

</P>

<PRE>
<CODE>char *readline (char *<VAR>prompt</VAR>);</CODE>
</PRE>

<P>
So, one might say

<PRE>
<CODE>char *line = readline ("Enter a line: ");</CODE>
</PRE>

<P>
in order to read a line of text from the user.
The line returned has the final newline removed, so only the
text remains.

</P>
<P>
If <CODE>readline</CODE> encounters an <CODE>EOF</CODE> while reading the line, and the
line is empty at that point, then <CODE>(char *)NULL</CODE> is returned.
Otherwise, the line is ended just as if a newline had been typed.

</P>
<P>
If you want the user to be able to get at the line later, (with
<KBD>C-p</KBD> for example), you must call <CODE>add_history ()</CODE> to save the
line away in a <STRONG>history</STRONG> list of such lines.

</P>

<PRE>
<CODE>add_history (line)</CODE>;
</PRE>

<P>
For full details on the GNU History Library, see the associated manual.

</P>
<P>
It is preferable to avoid saving empty lines on the history list, since
users rarely have a burning need to reuse a blank line.  Here is
a function which usefully replaces the standard <CODE>gets ()</CODE> library
function, and has the advantage of no static buffer to overflow:

</P>

<PRE>
/* A static variable for holding the line. */
static char *line_read = (char *)NULL;

/* Read a string, and return a pointer to it.  Returns NULL on EOF. */
char *
rl_gets ()
{
  /* If the buffer has already been allocated, return the memory
     to the free pool. */
  if (line_read)
    {
      free (line_read);
      line_read = (char *)NULL;
    }

  /* Get a line from the user. */
  line_read = readline ("");

  /* If the line has any text in it, save it on the history. */
  if (line_read &#38;&#38; *line_read)
    add_history (line_read);

  return (line_read);
}
</PRE>

<P>
This function gives the user the default behaviour of <KBD>TAB</KBD>
completion: completion on file names.  If you do not want Readline to
complete on filenames, you can change the binding of the <KBD>TAB</KBD> key
with <CODE>rl_bind_key ()</CODE>.

</P>

<PRE>
<CODE>int rl_bind_key (int <VAR>key</VAR>, int (*<VAR>function</VAR>)());</CODE>
</PRE>

<P>
<CODE>rl_bind_key ()</CODE> takes two arguments: <VAR>key</VAR> is the character that
you want to bind, and <VAR>function</VAR> is the address of the function to
call when <VAR>key</VAR> is pressed.  Binding <KBD>TAB</KBD> to <CODE>rl_insert ()</CODE>
makes <KBD>TAB</KBD> insert itself.
<CODE>rl_bind_key ()</CODE> returns non-zero if <VAR>key</VAR> is not a valid
ASCII character code (between 0 and 255).

</P>
<P>
Thus, to disable the default <KBD>TAB</KBD> behavior, the following suffices:

<PRE>
<CODE>rl_bind_key ('\t', rl_insert);</CODE>
</PRE>

<P>
This code should be executed once at the start of your program; you
might write a function called <CODE>initialize_readline ()</CODE> which
performs this and other desired initializations, such as installing
custom completers (see section <A HREF="rlman_2.html#SEC36">Custom Completers</A>).

</P>


<H2><A NAME="SEC23" HREF="rlman_toc.html#SEC23">Custom Functions</A></H2>

<P>
Readline provides many functions for manipulating the text of
the line, but it isn't possible to anticipate the needs of all
programs.  This section describes the various functions and variables
defined within the Readline library which allow a user program to add
customized functionality to Readline.

</P>

<UL>
<LI><A HREF="rlman_2.html#SEC24">The Function Type</A>: C declarations to make code readable.
<LI><A HREF="rlman_2.html#SEC25">Function Writing</A>: Variables and calling conventions.
</UL>



<H3><A NAME="SEC24" HREF="rlman_toc.html#SEC24">The Function Type</A></H3>

<P>
For readabilty, we declare a new type of object, called
<STRONG>Function</STRONG>.  A <CODE>Function</CODE> is a C function which
returns an <CODE>int</CODE>.  The type declaration for <CODE>Function</CODE> is:

</P>
<P>
<CODE>typedef int Function ();</CODE>

</P>
<P>
The reason for declaring this new type is to make it easier to write
code describing pointers to C functions.  Let us say we had a variable
called <VAR>func</VAR> which was a pointer to a function.  Instead of the
classic C declaration

</P>
<P>
<CODE>int (*)()func;</CODE>

</P>
<P>
we may write

</P>
<P>
<CODE>Function *func;</CODE>

</P>
<P>
Similarly, there are

</P>

<PRE>
typedef void VFunction ();
typedef char *CPFunction (); and
typedef char **CPPFunction ();
</PRE>

<P>
for functions returning no value, <CODE>pointer to char</CODE>, and
<CODE>pointer to pointer to char</CODE>, respectively.

</P>


<H3><A NAME="SEC25" HREF="rlman_toc.html#SEC25">Writing a New Function</A></H3>

<P>
In order to write new functions for Readline, you need to know the
calling conventions for keyboard-invoked functions, and the names of the
variables that describe the current state of the line read so far.

</P>
<P>
The calling sequence for a command <CODE>foo</CODE> looks like

</P>

<PRE>
<CODE>foo (int count, int key)</CODE>
</PRE>

<P>
where <VAR>count</VAR> is the numeric argument (or 1 if defaulted) and
<VAR>key</VAR> is the key that invoked this function.

</P>
<P>
It is completely up to the function as to what should be done with the
numeric argument.  Some functions use it as a repeat count, some
as a flag, and others to choose alternate behavior (refreshing the current
line as opposed to refreshing the screen, for example).  Some choose to
ignore it.  In general, if a
function uses the numeric argument as a repeat count, it should be able
to do something useful with both negative and positive arguments.
At the very least, it should be aware that it can be passed a
negative argument.

</P>
<P>
<DL>
<DT><U>Variable:</U> char * <B>rl_line_buffer</B>
<DD><A NAME="IDX79"></A>
This is the line gathered so far.  You are welcome to modify the
contents of the line, but see section <A HREF="rlman_2.html#SEC31">Allowing Undoing</A>.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> int <B>rl_point</B>
<DD><A NAME="IDX80"></A>
The offset of the current cursor position in <CODE>rl_line_buffer</CODE>
(the <EM>point</EM>).
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> int <B>rl_end</B>
<DD><A NAME="IDX81"></A>
The number of characters present in <CODE>rl_line_buffer</CODE>.  When
<CODE>rl_point</CODE> is at the end of the line, <CODE>rl_point</CODE> and
<CODE>rl_end</CODE> are equal.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> int <B>rl_mark</B>
<DD><A NAME="IDX82"></A>
The mark (saved position) in the current line.  If set, the mark
and point define a <EM>region</EM>.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> int <B>rl_done</B>
<DD><A NAME="IDX83"></A>
Setting this to a non-zero value causes Readline to return the current
line immediately.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> int <B>rl_pending_input</B>
<DD><A NAME="IDX84"></A>
Setting this to a value makes it the next keystroke read.  This is a
way to stuff a single character into the input stream.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> char * <B>rl_prompt</B>
<DD><A NAME="IDX85"></A>
The prompt Readline uses.  This is set from the argument to
<CODE>readline ()</CODE>, and should not be assigned to directly.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> char * <B>rl_terminal_name</B>
<DD><A NAME="IDX86"></A>
The terminal type, used for initialization.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> char * <B>rl_readline_name</B>
<DD><A NAME="IDX87"></A>
This variable is set to a unique name by each application using Readline.
The value allows conditional parsing of the inputrc file
(see section <A HREF="rlman_1.html#SEC10">Conditional Init Constructs</A>).
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> FILE * <B>rl_instream</B>
<DD><A NAME="IDX88"></A>
The stdio stream from which Readline reads input.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> FILE * <B>rl_outstream</B>
<DD><A NAME="IDX89"></A>
The stdio stream to which Readline performs output.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> Function * <B>rl_startup_hook</B>
<DD><A NAME="IDX90"></A>
If non-zero, this is the address of a function to call just
before <CODE>readline</CODE> prints the first prompt.
</DL>

</P>


<H2><A NAME="SEC26" HREF="rlman_toc.html#SEC26">Readline Convenience Functions</A></H2>


<UL>
<LI><A HREF="rlman_2.html#SEC27">Function Naming</A>: How to give a function you write a name.
<LI><A HREF="rlman_2.html#SEC28">Keymaps</A>: Making keymaps.
<LI><A HREF="rlman_2.html#SEC29">Binding Keys</A>: Changing Keymaps.
<LI><A HREF="rlman_2.html#SEC30">Associating Function Names and Bindings</A>: Translate function names to
						key sequences.
<LI><A HREF="rlman_2.html#SEC31">Allowing Undoing</A>: How to make your functions undoable.
<LI><A HREF="rlman_2.html#SEC32">Redisplay</A>: Functions to control line display.
<LI><A HREF="rlman_2.html#SEC33">Modifying Text</A>: Functions to modify <CODE>rl_line_buffer</CODE>.
<LI><A HREF="rlman_2.html#SEC34">Utility Functions</A>: Generally useful functions and hooks.
</UL>



<H3><A NAME="SEC27" HREF="rlman_toc.html#SEC27">Naming a Function</A></H3>

<P>
The user can dynamically change the bindings of keys while using
Readline.  This is done by representing the function with a descriptive
name.  The user is able to type the descriptive name when referring to
the function.  Thus, in an init file, one might find

</P>

<PRE>
Meta-Rubout:	backward-kill-word
</PRE>

<P>
This binds the keystroke <KBD>Meta-Rubout</KBD> to the function
<EM>descriptively</EM> named <CODE>backward-kill-word</CODE>.  You, as the
programmer, should bind the functions you write to descriptive names as
well.  Readline provides a function for doing that:

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_add_defun</B> <I>(char *name, Function *function, int key)</I>
<DD><A NAME="IDX91"></A>
Add <VAR>name</VAR> to the list of named functions.  Make <VAR>function</VAR> be
the function that gets called.  If <VAR>key</VAR> is not -1, then bind it to
<VAR>function</VAR> using <CODE>rl_bind_key ()</CODE>.
</DL>

</P>
<P>
Using this function alone is sufficient for most applications.  It is
the recommended way to add a few functions to the default functions that
Readline has built in.  If you need to do something other
than adding a function to Readline, you may need to use the
underlying functions described below.

</P>


<H3><A NAME="SEC28" HREF="rlman_toc.html#SEC28">Selecting a Keymap</A></H3>

<P>
Key bindings take place on a <STRONG>keymap</STRONG>.  The keymap is the
association between the keys that the user types and the functions that
get run.  You can make your own keymaps, copy existing keymaps, and tell
Readline which keymap to use.

</P>
<P>
<DL>
<DT><U>Function:</U> Keymap <B>rl_make_bare_keymap</B> <I>()</I>
<DD><A NAME="IDX92"></A>
Returns a new, empty keymap.  The space for the keymap is allocated with
<CODE>malloc ()</CODE>; you should <CODE>free ()</CODE> it when you are done.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> Keymap <B>rl_copy_keymap</B> <I>(Keymap map)</I>
<DD><A NAME="IDX93"></A>
Return a new keymap which is a copy of <VAR>map</VAR>.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> Keymap <B>rl_make_keymap</B> <I>()</I>
<DD><A NAME="IDX94"></A>
Return a new keymap with the printing characters bound to rl_insert,
the lowercase Meta characters bound to run their equivalents, and
the Meta digits bound to produce numeric arguments.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> void <B>rl_discard_keymap</B> <I>(Keymap keymap)</I>
<DD><A NAME="IDX95"></A>
Free the storage associated with <VAR>keymap</VAR>.
</DL>

</P>
<P>
Readline has several internal keymaps.  These functions allow you to
change which keymap is active.

</P>
<P>
<DL>
<DT><U>Function:</U> Keymap <B>rl_get_keymap</B> <I>()</I>
<DD><A NAME="IDX96"></A>
Returns the currently active keymap.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> void <B>rl_set_keymap</B> <I>(Keymap keymap)</I>
<DD><A NAME="IDX97"></A>
Makes <VAR>keymap</VAR> the currently active keymap.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> Keymap <B>rl_get_keymap_by_name</B> <I>(char *name)</I>
<DD><A NAME="IDX98"></A>
Return the keymap matching <VAR>name</VAR>.  <VAR>name</VAR> is one which would
be supplied in a <CODE>set keymap</CODE> inputrc line (see section <A HREF="rlman_1.html#SEC8">Readline Init File</A>).
</DL>

</P>


<H3><A NAME="SEC29" HREF="rlman_toc.html#SEC29">Binding Keys</A></H3>

<P>
You associate keys with functions through the keymap.  Readline has
several internal keymaps: <CODE>emacs_standard_keymap</CODE>,
<CODE>emacs_meta_keymap</CODE>, <CODE>emacs_ctlx_keymap</CODE>,
<CODE>vi_movement_keymap</CODE>, and <CODE>vi_insertion_keymap</CODE>.
<CODE>emacs_standard_keymap</CODE> is the default, and the examples in
this manual assume that.

</P>
<P>
These functions manage key bindings.

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_bind_key</B> <I>(int key, Function *function)</I>
<DD><A NAME="IDX99"></A>
Binds <VAR>key</VAR> to <VAR>function</VAR> in the currently active keymap.
Returns non-zero in the case of an invalid <VAR>key</VAR>.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_bind_key_in_map</B> <I>(int key, Function *function, Keymap map)</I>
<DD><A NAME="IDX100"></A>
Bind <VAR>key</VAR> to <VAR>function</VAR> in <VAR>map</VAR>.  Returns non-zero in the case
of an invalid <VAR>key</VAR>.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_unbind_key</B> <I>(int key)</I>
<DD><A NAME="IDX101"></A>
Bind <VAR>key</VAR> to the null function in the currently active keymap.
Returns non-zero in case of error.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_unbind_key_in_map</B> <I>(int key, Keymap map)</I>
<DD><A NAME="IDX102"></A>
Bind <VAR>key</VAR> to the null function in <VAR>map</VAR>.
Returns non-zero in case of error.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_generic_bind</B> <I>(int type, char *keyseq, char *data, Keymap map)</I>
<DD><A NAME="IDX103"></A>
Bind the key sequence represented by the string <VAR>keyseq</VAR> to the arbitrary
pointer <VAR>data</VAR>.  <VAR>type</VAR> says what kind of data is pointed to by
<VAR>data</VAR>; this can be a function (<CODE>ISFUNC</CODE>), a macro
(<CODE>ISMACR</CODE>), or a keymap (<CODE>ISKMAP</CODE>).  This makes new keymaps as
necessary.  The initial keymap in which to do bindings is <VAR>map</VAR>.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_parse_and_bind</B> <I>(char *line)</I>
<DD><A NAME="IDX104"></A>
Parse <VAR>line</VAR> as if it had been read from the <CODE>inputrc</CODE> file and
perform any key bindings and variable assignments found
(see section <A HREF="rlman_1.html#SEC8">Readline Init File</A>).
</DL>

</P>


<H3><A NAME="SEC30" HREF="rlman_toc.html#SEC30">Associating Function Names and Bindings</A></H3>

<P>
These functions allow you to find out what keys invoke named functions
and the functions invoked by a particular key sequence.

</P>
<P>
<DL>
<DT><U>Function:</U> Function * <B>rl_named_function</B> <I>(char *name)</I>
<DD><A NAME="IDX105"></A>
Return the function with name <VAR>name</VAR>.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> Function * <B>rl_function_of_keyseq</B> <I>(char *keyseq, Keymap map, int *type)</I>
<DD><A NAME="IDX106"></A>
Return the function invoked by <VAR>keyseq</VAR> in keymap <VAR>map</VAR>.
If <VAR>map</VAR> is NULL, the current keymap is used.  If <VAR>type</VAR> is
not NULL, the type of the object is returned in it (one of <CODE>ISFUNC</CODE>,
<CODE>ISKMAP</CODE>, or <CODE>ISMACR</CODE>).
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> char ** <B>rl_invoking_keyseqs</B> <I>(Function *function)</I>
<DD><A NAME="IDX107"></A>
Return an array of strings representing the key sequences used to
invoke <VAR>function</VAR> in the current keymap.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> char ** <B>rl_invoking_keyseqs_in_map</B> <I>(Function *function, Keymap map)</I>
<DD><A NAME="IDX108"></A>
Return an array of strings representing the key sequences used to
invoke <VAR>function</VAR> in the keymap <VAR>map</VAR>.
</DL>

</P>


<H3><A NAME="SEC31" HREF="rlman_toc.html#SEC31">Allowing Undoing</A></H3>

<P>
Supporting the undo command is a painless thing, and makes your
functions much more useful.  It is certainly easy to try
something if you know you can undo it.  I could use an undo function for
the stock market.

</P>
<P>
If your function simply inserts text once, or deletes text once, and
uses <CODE>rl_insert_text ()</CODE> or <CODE>rl_delete_text ()</CODE> to do it, then
undoing is already done for you automatically.

</P>
<P>
If you do multiple insertions or multiple deletions, or any combination
of these operations, you should group them together into one operation.
This is done with <CODE>rl_begin_undo_group ()</CODE> and
<CODE>rl_end_undo_group ()</CODE>.

</P>
<P>
The types of events that can be undone are:

</P>

<PRE>
enum undo_code { UNDO_DELETE, UNDO_INSERT, UNDO_BEGIN, UNDO_END }; 
</PRE>

<P>
Notice that <CODE>UNDO_DELETE</CODE> means to insert some text, and
<CODE>UNDO_INSERT</CODE> means to delete some text.  That is, the undo code
tells undo what to undo, not how to undo it.  <CODE>UNDO_BEGIN</CODE> and
<CODE>UNDO_END</CODE> are tags added by <CODE>rl_begin_undo_group ()</CODE> and
<CODE>rl_end_undo_group ()</CODE>.

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_begin_undo_group</B> <I>()</I>
<DD><A NAME="IDX109"></A>
Begins saving undo information in a group construct.  The undo
information usually comes from calls to <CODE>rl_insert_text ()</CODE> and
<CODE>rl_delete_text ()</CODE>, but could be the result of calls to
<CODE>rl_add_undo ()</CODE>.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_end_undo_group</B> <I>()</I>
<DD><A NAME="IDX110"></A>
Closes the current undo group started with <CODE>rl_begin_undo_group
()</CODE>.  There should be one call to <CODE>rl_end_undo_group ()</CODE>
for each call to <CODE>rl_begin_undo_group ()</CODE>.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> void <B>rl_add_undo</B> <I>(enum undo_code what, int start, int end, char *text)</I>
<DD><A NAME="IDX111"></A>
Remember how to undo an event (according to <VAR>what</VAR>).  The affected
text runs from <VAR>start</VAR> to <VAR>end</VAR>, and encompasses <VAR>text</VAR>.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> void <B>free_undo_list</B> <I>()</I>
<DD><A NAME="IDX112"></A>
Free the existing undo list.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_do_undo</B> <I>()</I>
<DD><A NAME="IDX113"></A>
Undo the first thing on the undo list.  Returns <CODE>0</CODE> if there was
nothing to undo, non-zero if something was undone.
</DL>

</P>
<P>
Finally, if you neither insert nor delete text, but directly modify the
existing text (e.g., change its case), call <CODE>rl_modifying ()</CODE>
once, just before you modify the text.  You must supply the indices of
the text range that you are going to modify.

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_modifying</B> <I>(int start, int end)</I>
<DD><A NAME="IDX114"></A>
Tell Readline to save the text between <VAR>start</VAR> and <VAR>end</VAR> as a
single undo unit.  It is assumed that you will subsequently modify
that text.
</DL>

</P>


<H3><A NAME="SEC32" HREF="rlman_toc.html#SEC32">Redisplay</A></H3>

<P>
<DL>
<DT><U>Function:</U> int <B>rl_redisplay</B> <I>()</I>
<DD><A NAME="IDX115"></A>
Change what's displayed on the screen to reflect the current contents
of <CODE>rl_line_buffer</CODE>.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_forced_update_display</B> <I>()</I>
<DD><A NAME="IDX116"></A>
Force the line to be updated and redisplayed, whether or not
Readline thinks the screen display is correct.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_on_new_line</B> <I>()</I>
<DD><A NAME="IDX117"></A>
Tell the update routines that we have moved onto a new (empty) line,
usually after ouputting a newline.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_reset_line_state</B> <I>()</I>
<DD><A NAME="IDX118"></A>
Reset the display state to a clean state and redisplay the current line
starting on a new line.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_message</B> <I>(va_alist)</I>
<DD><A NAME="IDX119"></A>
The arguments are a string as would be supplied to <CODE>printf</CODE>.  The
resulting string is displayed in the <STRONG>echo area</STRONG>.  The echo area
is also used to display numeric arguments and search strings.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_clear_message</B> <I>()</I>
<DD><A NAME="IDX120"></A>
Clear the message in the echo area.
</DL>

</P>


<H3><A NAME="SEC33" HREF="rlman_toc.html#SEC33">Modifying Text</A></H3>

<P>
<DL>
<DT><U>Function:</U> int <B>rl_insert_text</B> <I>(char *text)</I>
<DD><A NAME="IDX121"></A>
Insert <VAR>text</VAR> into the line at the current cursor position.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_delete_text</B> <I>(int start, int end)</I>
<DD><A NAME="IDX122"></A>
Delete the text between <VAR>start</VAR> and <VAR>end</VAR> in the current line.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> char * <B>rl_copy_text</B> <I>(int start, int end)</I>
<DD><A NAME="IDX123"></A>
Return a copy of the text between <VAR>start</VAR> and <VAR>end</VAR> in
the current line.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_kill_text</B> <I>(int start, int end)</I>
<DD><A NAME="IDX124"></A>
Copy the text between <VAR>start</VAR> and <VAR>end</VAR> in the current line
to the kill ring, appending or prepending to the last kill if the
last command was a kill command.  The text is deleted.
If <VAR>start</VAR> is less than <VAR>end</VAR>,
the text is appended, otherwise prepended.  If the last command was
not a kill, a new kill ring slot is used.
</DL>

</P>


<H3><A NAME="SEC34" HREF="rlman_toc.html#SEC34">Utility Functions</A></H3>

<P>
<DL>
<DT><U>Function:</U> int <B>rl_reset_terminal</B> <I>(char *terminal_name)</I>
<DD><A NAME="IDX125"></A>
Reinitialize Readline's idea of the terminal settings using
<VAR>terminal_name</VAR> as the terminal type (e.g., <CODE>vt100</CODE>).
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>alphabetic</B> <I>(int c)</I>
<DD><A NAME="IDX126"></A>
Return 1 if <VAR>c</VAR> is an alphabetic character.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>numeric</B> <I>(int c)</I>
<DD><A NAME="IDX127"></A>
Return 1 if <VAR>c</VAR> is a numeric character.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>ding</B> <I>()</I>
<DD><A NAME="IDX128"></A>
Ring the terminal bell, obeying the setting of <CODE>bell-style</CODE>.
</DL>

</P>
<P>
The following are implemented as macros, defined in <CODE>chartypes.h</CODE>.

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>uppercase_p</B> <I>(int c)</I>
<DD><A NAME="IDX129"></A>
Return 1 if <VAR>c</VAR> is an uppercase alphabetic character.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>lowercase_p</B> <I>(int c)</I>
<DD><A NAME="IDX130"></A>
Return 1 if <VAR>c</VAR> is a lowercase alphabetic character.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>digit_p</B> <I>(int c)</I>
<DD><A NAME="IDX131"></A>
Return 1 if <VAR>c</VAR> is a numeric character.
<DL>
<DT><U>Function:</U>  <B></B>
<DD><A NAME="IDX132"></A>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>to_upper</B> <I>(int c)</I>
<DD><A NAME="IDX133"></A>
If <VAR>c</VAR> is a lowercase alphabetic character, return the corresponding
uppercase character.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>to_lower</B> <I>(int c)</I>
<DD><A NAME="IDX134"></A>
If <VAR>c</VAR> is an uppercase alphabetic character, return the corresponding
lowercase character.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>digit_value</B> <I>(int c)</I>
<DD><A NAME="IDX135"></A>
If <VAR>c</VAR> is a number, return the value it represents.
</DL>

</P>


<H3><A NAME="SEC35" HREF="rlman_toc.html#SEC35">An Example</A></H3>

<P>
Here is a function which changes lowercase characters to their uppercase
equivalents, and uppercase characters to lowercase.  If
this function was bound to <SAMP>`M-c'</SAMP>, then typing <SAMP>`M-c'</SAMP> would
change the case of the character under point.  Typing <SAMP>`M-1 0 M-c'</SAMP>
would change the case of the following 10 characters, leaving the cursor on
the last character changed.

</P>

<PRE>
/* Invert the case of the COUNT following characters. */
int
invert_case_line (count, key)
     int count, key;
{
  register int start, end, i;

  start = rl_point;

  if (rl_point &#62;= rl_end)
    return (0);

  if (count &#60; 0)
    {
      direction = -1;
      count = -count;
    }
  else
    direction = 1;
      
  /* Find the end of the range to modify. */
  end = start + (count * direction);

  /* Force it to be within range. */
  if (end &#62; rl_end)
    end = rl_end;
  else if (end &#60; 0)
    end = 0;

  if (start == end)
    return (0);

  if (start &#62; end)
    {
      int temp = start;
      start = end;
      end = temp;
    }

  /* Tell readline that we are modifying the line, so it will save
     the undo information. */
  rl_modifying (start, end);

  for (i = start; i != end; i++)
    {
      if (uppercase_p (rl_line_buffer[i]))
        rl_line_buffer[i] = to_lower (rl_line_buffer[i]);
      else if (lowercase_p (rl_line_buffer[i]))
        rl_line_buffer[i] = to_upper (rl_line_buffer[i]);
    }
  /* Move point to on top of the last character changed. */
  rl_point = (direction == 1) ? end - 1 : start;
  return (0);
}
</PRE>



<H2><A NAME="SEC36" HREF="rlman_toc.html#SEC36">Custom Completers</A></H2>

<P>
Typically, a program that reads commands from the user has a way of
disambiguating commands and data.  If your program is one of these, then
it can provide completion for commands, data, or both.
The following sections describe how your program and Readline
cooperate to provide this service.

</P>

<UL>
<LI><A HREF="rlman_2.html#SEC37">How Completing Works</A>: The logic used to do completion.
<LI><A HREF="rlman_2.html#SEC38">Completion Functions</A>: Functions provided by Readline.
<LI><A HREF="rlman_2.html#SEC39">Completion Variables</A>: Variables which control completion.
<LI><A HREF="rlman_2.html#SEC40">A Short Completion Example</A>: An example of writing completer subroutines.
</UL>



<H3><A NAME="SEC37" HREF="rlman_toc.html#SEC37">How Completing Works</A></H3>

<P>
In order to complete some text, the full list of possible completions
must be available.  That is, it is not possible to accurately
expand a partial word without knowing all of the possible words
which make sense in that context.  The Readline library provides
the user interface to completion, and two of the most common
completion functions:  filename and username.  For completing other types
of text, you must write your own completion function.  This section
describes exactly what such functions must do, and provides an example.

</P>
<P>
There are three major functions used to perform completion:

</P>

<OL>
<LI>

The user-interface function <CODE>rl_complete ()</CODE>.  This function is
called with the same arguments as other Readline
functions intended for interactive use:  <VAR>count</VAR> and
<VAR>invoking_key</VAR>.  It isolates the word to be completed and calls
<CODE>completion_matches ()</CODE> to generate a list of possible completions.
It then either lists the possible completions, inserts the possible
completions, or actually performs the
completion, depending on which behavior is desired.

<LI>

The internal function <CODE>completion_matches ()</CODE> uses your
<STRONG>generator</STRONG> function to generate the list of possible matches, and
then returns the array of these matches.  You should place the address
of your generator function in <CODE>rl_completion_entry_function</CODE>.

<LI>

The generator function is called repeatedly from
<CODE>completion_matches ()</CODE>, returning a string each time.  The
arguments to the generator function are <VAR>text</VAR> and <VAR>state</VAR>.
<VAR>text</VAR> is the partial word to be completed.  <VAR>state</VAR> is zero the
first time the function is called, allowing the generator to perform
any necessary initialization, and a positive non-zero integer for
each subsequent call.  When the generator function returns
<CODE>(char *)NULL</CODE> this signals <CODE>completion_matches ()</CODE> that there are
no more possibilities left.  Usually the generator function computes the
list of possible completions when <VAR>state</VAR> is zero, and returns them
one at a time on subsequent calls.  Each string the generator function
returns as a match must be allocated with <CODE>malloc()</CODE>; Readline
frees the strings when it has finished with them.

</OL>

<P>
<DL>
<DT><U>Function:</U> int <B>rl_complete</B> <I>(int ignore, int invoking_key)</I>
<DD><A NAME="IDX136"></A>
Complete the word at or before point.  You have supplied the function
that does the initial simple matching selection algorithm (see
<CODE>completion_matches ()</CODE>).  The default is to do filename completion.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> Function * <B>rl_completion_entry_function</B>
<DD><A NAME="IDX137"></A>
This is a pointer to the generator function for <CODE>completion_matches
()</CODE>.  If the value of <CODE>rl_completion_entry_function</CODE> is
<CODE>(Function *)NULL</CODE> then the default filename generator function,
<CODE>filename_entry_function ()</CODE>, is used.
</DL>

</P>


<H3><A NAME="SEC38" HREF="rlman_toc.html#SEC38">Completion Functions</A></H3>

<P>
Here is the complete list of callable completion functions present in
Readline.

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_complete_internal</B> <I>(int what_to_do)</I>
<DD><A NAME="IDX138"></A>
Complete the word at or before point.  <VAR>what_to_do</VAR> says what to do
with the completion.  A value of <SAMP>`?'</SAMP> means list the possible
completions.  <SAMP>`TAB'</SAMP> means do standard completion.  <SAMP>`*'</SAMP> means
insert all of the possible completions.  <SAMP>`!'</SAMP> means to display
all of the possible completions, if there is more than one, as well as
performing partial completion.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_complete</B> <I>(int ignore, int invoking_key)</I>
<DD><A NAME="IDX139"></A>
Complete the word at or before point.  You have supplied the function
that does the initial simple matching selection algorithm (see
<CODE>completion_matches ()</CODE> and <CODE>rl_completion_entry_function</CODE>).
The default is to do filename
completion.  This calls <CODE>rl_complete_internal ()</CODE> with an
argument depending on <VAR>invoking_key</VAR>.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_possible_completions</B> <I>(int count, int invoking_key))</I>
<DD><A NAME="IDX140"></A>
List the possible completions.  See description of <CODE>rl_complete
()</CODE>.  This calls <CODE>rl_complete_internal ()</CODE> with an argument of
<SAMP>`?'</SAMP>.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_insert_completions</B> <I>(int count, int invoking_key))</I>
<DD><A NAME="IDX141"></A>
Insert the list of possible completions into the line, deleting the
partially-completed word.  See description of <CODE>rl_complete ()</CODE>.
This calls <CODE>rl_complete_internal ()</CODE> with an argument of <SAMP>`*'</SAMP>.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> char ** <B>completion_matches</B> <I>(char *text, CPFunction *entry_func)</I>
<DD><A NAME="IDX142"></A>
Returns an array of <CODE>(char *)</CODE> which is a list of completions for
<VAR>text</VAR>.  If there are no completions, returns <CODE>(char **)NULL</CODE>.
The first entry in the returned array is the substitution for <VAR>text</VAR>.
The remaining entries are the possible completions.  The array is
terminated with a <CODE>NULL</CODE> pointer.

</P>
<P>
<VAR>entry_func</VAR> is a function of two args, and returns a
<CODE>(char *)</CODE>.  The first argument is <VAR>text</VAR>.  The second is a
state argument; it is zero on the first call, and non-zero on subsequent
calls.  <VAR>entry_func</VAR> returns a <CODE>NULL</CODE>  pointer to the caller
when there are no more matches.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> char * <B>filename_completion_function</B> <I>(char *text, int state)</I>
<DD><A NAME="IDX143"></A>
A generator function for filename completion in the general case.  Note
that completion in Bash is a little different because of all
the pathnames that must be followed when looking up completions for a
command.  The Bash source is a useful reference for writing custom
completion functions.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> char * <B>username_completion_function</B> <I>(char *text, int state)</I>
<DD><A NAME="IDX144"></A>
A completion generator for usernames.  <VAR>text</VAR> contains a partial
username preceded by a random character (usually <SAMP>`~'</SAMP>).  As with all
completion generators, <VAR>state</VAR> is zero on the first call and non-zero
for subsequent calls.
</DL>

</P>


<H3><A NAME="SEC39" HREF="rlman_toc.html#SEC39">Completion Variables</A></H3>

<P>
<DL>
<DT><U>Variable:</U> Function * <B>rl_completion_entry_function</B>
<DD><A NAME="IDX145"></A>
A pointer to the generator function for <CODE>completion_matches ()</CODE>.
<CODE>NULL</CODE> means to use <CODE>filename_entry_function ()</CODE>, the default
filename completer.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> CPPFunction * <B>rl_attempted_completion_function</B>
<DD><A NAME="IDX146"></A>
A pointer to an alternative function to create matches.
The function is called with <VAR>text</VAR>, <VAR>start</VAR>, and <VAR>end</VAR>.
<VAR>start</VAR> and <VAR>end</VAR> are indices in <CODE>rl_line_buffer</CODE> saying
what the boundaries of <VAR>text</VAR> are.  If this function exists and
returns <CODE>NULL</CODE>, or if this variable is set to <CODE>NULL</CODE>, then
<CODE>rl_complete ()</CODE> will call the value of
<CODE>rl_completion_entry_function</CODE> to generate matches, otherwise the
array of strings returned will be used.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> int <B>rl_completion_query_items</B>
<DD><A NAME="IDX147"></A>
Up to this many items will be displayed in response to a
possible-completions call.  After that, we ask the user if she is sure
she wants to see them all.  The default value is 100.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> char * <B>rl_basic_word_break_characters</B>
<DD><A NAME="IDX148"></A>
The basic list of characters that signal a break between words for the
completer routine.  The default value of this variable is the characters
which break words for completion in Bash, i.e.,
<CODE>" \t\n\"\\'`@$&#62;&#60;=;|&#38;{("</CODE>.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> char * <B>rl_completer_word_break_characters</B>
<DD><A NAME="IDX149"></A>
The list of characters that signal a break between words for
<CODE>rl_complete_internal ()</CODE>.  The default list is the value of
<CODE>rl_basic_word_break_characters</CODE>.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> char * <B>rl_special_prefixes</B>
<DD><A NAME="IDX150"></A>
The list of characters that are word break characters, but should be
left in <VAR>text</VAR> when it is passed to the completion function.
Programs can use this to help determine what kind of completing to do.
For instance, Bash sets this variable to "$@" so that it can complete
shell variables and hostnames.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> int <B>rl_ignore_completion_duplicates</B>
<DD><A NAME="IDX151"></A>
If non-zero, then disallow duplicates in the matches.  Default is 1.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> int <B>rl_filename_completion_desired</B>
<DD><A NAME="IDX152"></A>
Non-zero means that the results of the matches are to be treated as
filenames.  This is <EM>always</EM> zero on entry, and can only be changed
within a completion entry generator function.  If it is set to a non-zero
value, directory names have a slash appended and Readline attempts to
quote completed filenames if they contain any embedded word break
characters.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> int <B>rl_filename_quoting_desired</B>
<DD><A NAME="IDX153"></A>
Non-zero means that the results of the matches are to be quoted using
double quotes (or an application-specific quoting mechanism) if the
completed filename contains any characters in
<CODE>rl_completer_word_break_chars</CODE>.  This is <EM>always</EM> non-zero
on entry, and can only be changed within a completion entry generator
function.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> Function * <B>rl_ignore_some_completions_function</B>
<DD><A NAME="IDX154"></A>
This function, if defined, is called by the completer when real filename
completion is done, after all the matching names have been generated.
It is passed a <CODE>NULL</CODE> terminated array of matches.
The first element (<CODE>matches[0]</CODE>) is the
maximal substring common to all matches. This function can
re-arrange the list of matches as required, but each element deleted
from the array must be freed.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> char * <B>rl_completer_quote_characters</B>
<DD><A NAME="IDX155"></A>
List of characters which can be used to quote a substring of the line.
Completion occurs on the entire substring, and within the substring
<CODE>rl_completer_word_break_characters</CODE> are treated as any other character,
unless they also appear within this list.
</DL>

</P>



<H3><A NAME="SEC40" HREF="rlman_toc.html#SEC40">A Short Completion Example</A></H3>

<P>
Here is a small application demonstrating the use of the GNU Readline
library.  It is called <CODE>fileman</CODE>, and the source code resides in
<TT>`examples/fileman.c'</TT>.  This sample application provides
completion of command names, line editing features, and access to the
history list.

</P>

<PRE>
/* fileman.c -- A tiny application which demonstrates how to use the
   GNU Readline library.  This application interactively allows users
   to manipulate files and their modes. */

#include &#60;stdio.h&#62;
#include &#60;sys/types.h&#62;
#include &#60;sys/file.h&#62;
#include &#60;sys/stat.h&#62;
#include &#60;sys/errno.h&#62;

#include &#60;readline/readline.h&#62;
#include &#60;readline/history.h&#62;

extern char *getwd ();
extern char *xmalloc ();

/* The names of functions that actually do the manipulation. */
int com_list (), com_view (), com_rename (), com_stat (), com_pwd ();
int com_delete (), com_help (), com_cd (), com_quit ();

/* A structure which contains information on the commands this program
   can understand. */

typedef struct {
  char *name;			/* User printable name of the function. */
  Function *func;		/* Function to call to do the job. */
  char *doc;			/* Documentation for this function.  */
} COMMAND;

COMMAND commands[] = {
  { "cd", com_cd, "Change to directory DIR" },
  { "delete", com_delete, "Delete FILE" },
  { "help", com_help, "Display this text" },
  { "?", com_help, "Synonym for `help'" },
  { "list", com_list, "List files in DIR" },
  { "ls", com_list, "Synonym for `list'" },
  { "pwd", com_pwd, "Print the current working directory" },
  { "quit", com_quit, "Quit using Fileman" },
  { "rename", com_rename, "Rename FILE to NEWNAME" },
  { "stat", com_stat, "Print out statistics on FILE" },
  { "view", com_view, "View the contents of FILE" },
  { (char *)NULL, (Function *)NULL, (char *)NULL }
};

/* Forward declarations. */
char *stripwhite ();
COMMAND *find_command ();

/* The name of this program, as taken from argv[0]. */
char *progname;

/* When non-zero, this global means the user is done using this program. */
int done;

char *
dupstr (s)
     int s;
{
  char *r;

  r = xmalloc (strlen (s) + 1);
  strcpy (r, s);
  return (r);
}

main (argc, argv)
     int argc;
     char **argv;
{
  char *line, *s;

  progname = argv[0];

  initialize_readline ();	/* Bind our completer. */

  /* Loop reading and executing lines until the user quits. */
  for ( ; done == 0; )
    {
      line = readline ("FileMan: ");

      if (!line)
        break;

      /* Remove leading and trailing whitespace from the line.
         Then, if there is anything left, add it to the history list
         and execute it. */
      s = stripwhite (line);

      if (*s)
        {
          add_history (s);
          execute_line (s);
        }

      free (line);
    }
  exit (0);
}

/* Execute a command line. */
int
execute_line (line)
     char *line;
{
  register int i;
  COMMAND *command;
  char *word;

  /* Isolate the command word. */
  i = 0;
  while (line[i] &#38;&#38; whitespace (line[i]))
    i++;
  word = line + i;

  while (line[i] &#38;&#38; !whitespace (line[i]))
    i++;

  if (line[i])
    line[i++] = '\0';

  command = find_command (word);

  if (!command)
    {
      fprintf (stderr, "%s: No such command for FileMan.\n", word);
      return (-1);
    }

  /* Get argument to command, if any. */
  while (whitespace (line[i]))
    i++;

  word = line + i;

  /* Call the function. */
  return ((*(command-&#62;func)) (word));
}

/* Look up NAME as the name of a command, and return a pointer to that
   command.  Return a NULL pointer if NAME isn't a command name. */
COMMAND *
find_command (name)
     char *name;
{
  register int i;

  for (i = 0; commands[i].name; i++)
    if (strcmp (name, commands[i].name) == 0)
      return (&#38;commands[i]);

  return ((COMMAND *)NULL);
}

/* Strip whitespace from the start and end of STRING.  Return a pointer
   into STRING. */
char *
stripwhite (string)
     char *string;
{
  register char *s, *t;

  for (s = string; whitespace (*s); s++)
    ;
    
  if (*s == 0)
    return (s);

  t = s + strlen (s) - 1;
  while (t &#62; s &#38;&#38; whitespace (*t))
    t--;
  *++t = '\0';

  return s;
}

/* **************************************************************** */
/*                                                                  */
/*                  Interface to Readline Completion                */
/*                                                                  */
/* **************************************************************** */

char *command_generator ();
char **fileman_completion ();

/* Tell the GNU Readline library how to complete.  We want to try to complete
   on command names if this is the first word in the line, or on filenames
   if not. */
initialize_readline ()
{
  /* Allow conditional parsing of the ~/.inputrc file. */
  rl_readline_name = "FileMan";

  /* Tell the completer that we want a crack first. */
  rl_attempted_completion_function = (CPPFunction *)fileman_completion;
}

/* Attempt to complete on the contents of TEXT.  START and END show the
   region of TEXT that contains the word to complete.  We can use the
   entire line in case we want to do some simple parsing.  Return the
   array of matches, or NULL if there aren't any. */
char **
fileman_completion (text, start, end)
     char *text;
     int start, end;
{
  char **matches;

  matches = (char **)NULL;

  /* If this word is at the start of the line, then it is a command
     to complete.  Otherwise it is the name of a file in the current
     directory. */
  if (start == 0)
    matches = completion_matches (text, command_generator);

  return (matches);
}

/* Generator function for command completion.  STATE lets us know whether
   to start from scratch; without any state (i.e. STATE == 0), then we
   start at the top of the list. */
char *
command_generator (text, state)
     char *text;
     int state;
{
  static int list_index, len;
  char *name;

  /* If this is a new word to complete, initialize now.  This includes
     saving the length of TEXT for efficiency, and initializing the index
     variable to 0. */
  if (!state)
    {
      list_index = 0;
      len = strlen (text);
    }

  /* Return the next name which partially matches from the command list. */
  while (name = commands[list_index].name)
    {
      list_index++;

      if (strncmp (name, text, len) == 0)
        return (dupstr(name));
    }

  /* If no names matched, then return NULL. */
  return ((char *)NULL);
}

/* **************************************************************** */
/*                                                                  */
/*                       FileMan Commands                           */
/*                                                                  */
/* **************************************************************** */

/* String to pass to system ().  This is for the LIST, VIEW and RENAME
   commands. */
static char syscom[1024];

/* List the file(s) named in arg. */
com_list (arg)
     char *arg;
{
  if (!arg)
    arg = "";

  sprintf (syscom, "ls -FClg %s", arg);
  return (system (syscom));
}

com_view (arg)
     char *arg;
{
  if (!valid_argument ("view", arg))
    return 1;

  sprintf (syscom, "more %s", arg);
  return (system (syscom));
}

com_rename (arg)
     char *arg;
{
  too_dangerous ("rename");
  return (1);
}

com_stat (arg)
     char *arg;
{
  struct stat finfo;

  if (!valid_argument ("stat", arg))
    return (1);

  if (stat (arg, &#38;finfo) == -1)
    {
      perror (arg);
      return (1);
    }

  printf ("Statistics for `%s':\n", arg);

  printf ("%s has %d link%s, and is %d byte%s in length.\n", arg,
          finfo.st_nlink,
          (finfo.st_nlink == 1) ? "" : "s",
          finfo.st_size,
          (finfo.st_size == 1) ? "" : "s");
  printf ("Inode Last Change at: %s", ctime (&#38;finfo.st_ctime));
  printf ("      Last access at: %s", ctime (&#38;finfo.st_atime));
  printf ("    Last modified at: %s", ctime (&#38;finfo.st_mtime));
  return (0);
}

com_delete (arg)
     char *arg;
{
  too_dangerous ("delete");
  return (1);
}

/* Print out help for ARG, or for all of the commands if ARG is
   not present. */
com_help (arg)
     char *arg;
{
  register int i;
  int printed = 0;

  for (i = 0; commands[i].name; i++)
    {
      if (!*arg || (strcmp (arg, commands[i].name) == 0))
        {
          printf ("%s\t\t%s.\n", commands[i].name, commands[i].doc);
          printed++;
        }
    }

  if (!printed)
    {
      printf ("No commands match `%s'.  Possibilties are:\n", arg);

      for (i = 0; commands[i].name; i++)
        {
          /* Print in six columns. */
          if (printed == 6)
            {
              printed = 0;
              printf ("\n");
            }

          printf ("%s\t", commands[i].name);
          printed++;
        }

      if (printed)
        printf ("\n");
    }
  return (0);
}

/* Change to the directory ARG. */
com_cd (arg)
     char *arg;
{
  if (chdir (arg) == -1)
    {
      perror (arg);
      return 1;
    }

  com_pwd ("");
  return (0);
}

/* Print out the current working directory. */
com_pwd (ignore)
     char *ignore;
{
  char dir[1024], *s;

  s = getwd (dir);
  if (s == 0)
    {
      printf ("Error getting pwd: %s\n", dir);
      return 1;
    }

  printf ("Current directory is %s\n", dir);
  return 0;
}

/* The user wishes to quit using this program.  Just set DONE non-zero. */
com_quit (arg)
     char *arg;
{
  done = 1;
  return (0);
}

/* Function which tells you that you can't do this. */
too_dangerous (caller)
     char *caller;
{
  fprintf (stderr,
           "%s: Too dangerous for me to distribute.  Write it yourself.\n",
           caller);
}

/* Return non-zero if ARG is a valid argument for CALLER, else print
   an error message and return zero. */
int
valid_argument (caller, arg)
     char *caller, *arg;
{
  if (!arg || !*arg)
    {
      fprintf (stderr, "%s: Argument required.\n", caller);
      return (0);
    }

  return (1);
}
</PRE>

<HR>
Go to the <A HREF="rlman_1.html">first</A>, <A HREF="rlman_1.html">previous</A>, <A HREF="rlman_3.html">next</A>, <A HREF="rlman_4.html">last</A> section, <A HREF="rlman_toc.html">table of contents</A>.
</BODY>
</HTML>
